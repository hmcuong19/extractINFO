import streamlit as st
import google.generativeai as genai
import io
import docx
import fitz  # PyMuPDF
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4

st.set_page_config(page_title="Tr√≠ch xu·∫•t Th√¥ng tin Th√¥ng minh", page_icon="‚ú®", layout="wide")

try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
except (KeyError, FileNotFoundError):
    st.warning("Kh√¥ng t√¨m th·∫•y Google API Key trong Streamlit secrets. Vui l√≤ng nh·∫≠p th·ªß c√¥ng ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng.")
    GOOGLE_API_KEY = st.text_input("Nh·∫≠p Google API Key c·ªßa b·∫°n:", type="password")
    if GOOGLE_API_KEY:
        genai.configure(api_key=GOOGLE_API_KEY)
    else:
        st.info("Vui l√≤ng cung c·∫•p API key ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        st.stop()

def get_gemini_response(input_text, prompt):
    model = genai.GenerativeModel('gemini-1.5-flash')
    try:
        response = model.generate_content([input_text, prompt])
        return response.text
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi API Gemini: {e}"

def extract_text_from_docx(file_bytes):
    try:
        doc = docx.Document(io.BytesIO(file_bytes))
        full_text = [para.text for para in doc.paragraphs]
        return '\n'.join(full_text)
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc file .docx: {e}")
        return None

def extract_text_from_pdf(file_bytes):
    try:
        pdf_document = fitz.open(stream=file_bytes, filetype="pdf")
        full_text = ""
        for page_num in range(len(pdf_document)):
            page = pdf_document.load_page(page_num)
            full_text += page.get_text()
        pdf_document.close()
        return full_text
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc file .pdf: {e}")
        return None

def convert_docx_to_pdf_bytes(file_bytes):
    try:
        doc = docx.Document(io.BytesIO(file_bytes))
        buffer = io.BytesIO()
        c = canvas.Canvas(buffer, pagesize=A4)
        width, height = A4
        y = height - 50
        for para in doc.paragraphs:
            text = para.text.strip()
            if text:
                c.drawString(50, y, text)
                y -= 15
                if y < 50:
                    c.showPage()
                    y = height - 50
        c.save()
        buffer.seek(0)
        return buffer.read()
    except Exception as e:
        st.error(f"‚ùå L·ªói chuy·ªÉn DOCX sang PDF t·∫°m: {e}")
        return None

st.title("‚ú® Tr√≠ch xu·∫•t Th√¥ng tin t·ª´ T√†i li·ªáu v·ªõi Gemini Pro")
st.markdown("T·∫£i l√™n t·ªáp `.docx` ho·∫∑c `.pdf` v√† s·ª≠ d·ª•ng prompt ƒë·ªÉ y√™u c·∫ßu Gemini tr√≠ch xu·∫•t c√°c tr∆∞·ªùng th√¥ng tin b·∫°n c·∫ßn.")

col1, col2 = st.columns([2, 3])

with col1:
    st.header("1. T·∫£i l√™n & T√πy ch·ªânh")

    uploaded_file = st.file_uploader("Ch·ªçn m·ªôt t·ªáp (.docx ho·∫∑c .pdf)", type=['docx', 'pdf'])

    prompt_default = """B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp trong vi·ªác tr√≠ch xu·∫•t th√¥ng tin.
D·ª±a v√†o n·ªôi dung vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p, h√£y t√°ch v√† li·ªát k√™ c√°c th√¥ng tin sau:
T·ª´ n·ªôi dung ƒë·ªÅ c∆∞∆°ng h·ªçc ph·∫ßn d∆∞·ªõi ƒë√¢y, h√£y tr√≠ch xu·∫•t v√† tr√¨nh b√†y r√µ r√†ng c√°c m·ª•c sau:
T√™n h·ªçc ph·∫ßn
M√£ h·ªçc ph·∫ßn (n·∫øu c√≥)
S·ªë t√≠n ch·ªâ
ƒêi·ªÅu ki·ªán ti√™n quy·∫øt (n·∫øu c√≥)
M·ª•c ti√™u h·ªçc ph·∫ßn
Chu·∫©n ƒë·∫ßu ra c·ªßa h·ªçc ph·∫ßn (CLO)
N·ªôi dung h·ªçc ph·∫ßn t√≥m t·∫Øt
T√†i li·ªáu tham kh·∫£o (ghi r√µ t√™n, t√°c gi·∫£, nƒÉm, NXB n·∫øu c√≥)

Tr√¨nh b√†y c√¢u tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng r√µ r√†ng nh∆∞ sau:
T√™n h·ªçc ph·∫ßn: ...
M√£ h·ªçc ph·∫ßn: ...
S·ªë t√≠n ch·ªâ: ...
ƒêi·ªÅu ki·ªán ti√™n quy·∫øt: ...
M·ª•c ti√™u h·ªçc ph·∫ßn:
- ...
- ...
Chu·∫©n ƒë·∫ßu ra:
- CLO1: ...
- CLO2: ...
...
T√≥m t·∫Øt n·ªôi dung h·ªçc ph·∫ßn:
- Tu·∫ßn 1: ...
- Tu·∫ßn 2: ...
...
T√†i li·ªáu tham kh·∫£o:
- ...
- ...

N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin n√†o, h√£y ghi l√† \"Kh√¥ng t√¨m th·∫•y\".
"""
    prompt_user = st.text_area("Ch·ªânh s·ª≠a prompt (c√¢u l·ªánh y√™u c·∫ßu):", value=prompt_default, height=350)
    submit_button = st.button("üöÄ B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t")

with col2:
    st.header("2. K·∫øt qu·∫£ tr√≠ch xu·∫•t")
    result_container = st.container()
    result_container.info("K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y sau khi b·∫°n nh·∫•n n√∫t 'B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t'.")

    if submit_button:
        if uploaded_file is not None and prompt_user:
            with st.spinner("ƒêang ƒë·ªçc file v√† g·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini... Vui l√≤ng ch·ªù! ü§ñ"):
                file_bytes = uploaded_file.getvalue()
                file_extension = uploaded_file.name.split('.')[-1].lower()
                raw_text = None

                if file_extension == "docx":
                    pdf_bytes = convert_docx_to_pdf_bytes(file_bytes)
                    if pdf_bytes:
                        raw_text = extract_text_from_pdf(pdf_bytes)
                elif file_extension == "pdf":
                    raw_text = extract_text_from_pdf(file_bytes)

                if raw_text:
                    response = get_gemini_response(raw_text, prompt_user)
                    result_container.markdown(response, unsafe_allow_html=False)
                else:
                    result_container.error("Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung t·ª´ file ƒë√£ t·∫£i l√™n. File c√≥ th·ªÉ b·ªã l·ªói ho·∫∑c tr·ªëng.")
        elif not uploaded_file:
            st.warning("Vui l√≤ng t·∫£i l√™n m·ªôt file ƒë·ªÉ ti·∫øp t·ª•c.")
        else:
            st.warning("Prompt kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
